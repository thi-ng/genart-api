//! Generated by @thi.ng/wasm-api-bindgen at 2024-11-09T17:50:40.693Z
//! DO NOT EDIT!

const std = @import("std");
const bindgen = @import("wasm-api-bindgen");

pub const OptionSlice = bindgen.Slice([]Option, [*]Option);
pub const ConstOptionSlice = bindgen.Slice([]const Option, [*]const Option);

pub const Param = extern union {
    choice: ChoiceParam,
    color: ColorParam,
    range: RangeParam,
};

pub const ChoiceParam = extern struct {
    /// DO NOT EDIT - internal use only
    type: bindgen.ConstStringPtr = "choice",
    id: bindgen.ConstStringPtr,
    name: bindgen.ConstStringPtr,
    desc: bindgen.ConstStringPtr,
    doc: ?bindgen.ConstStringPtr = null,
    default: ?bindgen.ConstStringPtr = null,
    /// In Zig, use `genart.options()` to wrap
    options: ConstOptionSlice,
};

pub const Option = extern struct {
    value: bindgen.ConstStringPtr,
    label: ?bindgen.ConstStringPtr = null,
};

pub const ColorParam = extern struct {
    /// DO NOT EDIT - internal use only
    type: bindgen.ConstStringPtr = "color",
    id: bindgen.ConstStringPtr,
    name: bindgen.ConstStringPtr,
    desc: bindgen.ConstStringPtr,
    doc: ?bindgen.ConstStringPtr = null,
    default: ?bindgen.ConstStringPtr = null,
};

pub const RangeParam = extern struct {
    /// DO NOT EDIT - internal use only
    type: bindgen.ConstStringPtr = "range",
    id: bindgen.ConstStringPtr,
    name: bindgen.ConstStringPtr,
    desc: bindgen.ConstStringPtr,
    doc: ?bindgen.ConstStringPtr = null,
    default: f64 = std.math.inf(f64),
    min: f64 = 0,
    max: f64 = 100,
    step: f64 = 1,
    exponent: f64 = 1,
};

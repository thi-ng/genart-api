/**
 * Generated by @thi.ng/wasm-api-bindgen at 2024-11-10T18:38:11.669Z
 * DO NOT EDIT!
 */

// @ts-ignore possibly includes unused imports
import { defType, Pointer, WasmStringPtr, type IWasmMemoryAccess, type MemorySlice, type MemoryView, type WasmTypeBase } from "@thi.ng/wasm-api";
// @ts-ignore
import { __array, __instanceArray, __slice32, __primslice32 } from "@thi.ng/wasm-api/memory";

// @ts-ignore possibly unused
const __str = (mem: IWasmMemoryAccess, base: number, isConst = true) => new WasmStringPtr(mem, base, isConst);

export interface Param extends WasmTypeBase {
	readonly choice: ChoiceParam;
	readonly color: ColorParam;
	readonly range: RangeParam;
}

// @ts-ignore possibly unused args
export const $Param = defType<Param>(8, 64, (mem, base) => {
	return {
		get choice(): ChoiceParam {
			return $ChoiceParam(mem).instance(base);
		},
		get color(): ColorParam {
			return $ColorParam(mem).instance(base);
		},
		get range(): RangeParam {
			return $RangeParam(mem).instance(base);
		},
	};
});

export enum UpdateBehavior {
	event,
	reload,
}

export interface ChoiceParam extends WasmTypeBase {
	/**
	 * DO NOT EDIT - internal use only
	 */
	readonly type: WasmStringPtr;
	readonly id: WasmStringPtr;
	readonly name: WasmStringPtr;
	readonly desc: WasmStringPtr;
	readonly doc: WasmStringPtr;
	readonly update: UpdateBehavior;
	readonly default: WasmStringPtr;
	/**
	 * In Zig, use `genart.options()` to wrap
	 */
	readonly options: Option[];
	
	asParam(): ReturnType<typeof $genart.params.choice>;
	
}

// @ts-ignore possibly unused args
export const $ChoiceParam = defType<ChoiceParam>(4, 36, (mem, base) => {
	let $type: WasmStringPtr, $id: WasmStringPtr, $name: WasmStringPtr, $desc: WasmStringPtr, $doc: WasmStringPtr, $default: WasmStringPtr;
	return {
		get type(): WasmStringPtr {
			return $type || ($type = __str(mem, base));
		},
		get id(): WasmStringPtr {
			return $id || ($id = __str(mem, (base + 4)));
		},
		get name(): WasmStringPtr {
			return $name || ($name = __str(mem, (base + 8)));
		},
		get desc(): WasmStringPtr {
			return $desc || ($desc = __str(mem, (base + 12)));
		},
		get doc(): WasmStringPtr {
			return $doc || ($doc = __str(mem, (base + 16)));
		},
		get update(): UpdateBehavior {
			return mem.u8[(base + 20)];
		},
		get default(): WasmStringPtr {
			return $default || ($default = __str(mem, (base + 24)));
		},
		get options(): Option[] {
			return __slice32(mem, $Option, (base + 28));
		},
		
		asParam() {
			return $genart.params.choice<string>({
				name: this.name.deref(),
				desc: this.desc.deref(),
				doc: this.doc.deref() || undefined,
				update: <any>UpdateBehavior[this.update],
				default: this.default.deref() || undefined,
				options: this.options.map((x) => x.label.addr ? [x.value.deref(), x.label.deref()]: x.value.deref()),
			});
		}
		
	};
});

export interface Option extends WasmTypeBase {
	readonly value: WasmStringPtr;
	readonly label: WasmStringPtr;
}

// @ts-ignore possibly unused args
export const $Option = defType<Option>(4, 8, (mem, base) => {
	let $value: WasmStringPtr, $label: WasmStringPtr;
	return {
		get value(): WasmStringPtr {
			return $value || ($value = __str(mem, base));
		},
		get label(): WasmStringPtr {
			return $label || ($label = __str(mem, (base + 4)));
		},
	};
});

export interface ColorParam extends WasmTypeBase {
	/**
	 * DO NOT EDIT - internal use only
	 */
	readonly type: WasmStringPtr;
	readonly id: WasmStringPtr;
	readonly name: WasmStringPtr;
	readonly desc: WasmStringPtr;
	readonly doc: WasmStringPtr;
	readonly update: UpdateBehavior;
	readonly default: WasmStringPtr;
	
	asParam(): ReturnType<typeof $genart.params.color>;
	
}

// @ts-ignore possibly unused args
export const $ColorParam = defType<ColorParam>(4, 28, (mem, base) => {
	let $type: WasmStringPtr, $id: WasmStringPtr, $name: WasmStringPtr, $desc: WasmStringPtr, $doc: WasmStringPtr, $default: WasmStringPtr;
	return {
		get type(): WasmStringPtr {
			return $type || ($type = __str(mem, base));
		},
		get id(): WasmStringPtr {
			return $id || ($id = __str(mem, (base + 4)));
		},
		get name(): WasmStringPtr {
			return $name || ($name = __str(mem, (base + 8)));
		},
		get desc(): WasmStringPtr {
			return $desc || ($desc = __str(mem, (base + 12)));
		},
		get doc(): WasmStringPtr {
			return $doc || ($doc = __str(mem, (base + 16)));
		},
		get update(): UpdateBehavior {
			return mem.u8[(base + 20)];
		},
		get default(): WasmStringPtr {
			return $default || ($default = __str(mem, (base + 24)));
		},
		
		asParam() {
			return $genart.params.color({
				name: this.name.deref(),
				desc: this.desc.deref(),
				doc: this.doc.deref() || undefined,
				update: <any>UpdateBehavior[this.update],
				default: this.default.deref() || undefined,
			});
		}
		
	};
});

export interface RangeParam extends WasmTypeBase {
	/**
	 * DO NOT EDIT - internal use only
	 */
	readonly type: WasmStringPtr;
	readonly id: WasmStringPtr;
	readonly name: WasmStringPtr;
	readonly desc: WasmStringPtr;
	readonly doc: WasmStringPtr;
	readonly update: UpdateBehavior;
	/**
	 * Zig type: `f64`
	 */
	readonly default: number;
	/**
	 * Zig type: `f64`
	 */
	readonly min: number;
	/**
	 * Zig type: `f64`
	 */
	readonly max: number;
	/**
	 * Zig type: `f64`
	 */
	readonly step: number;
	/**
	 * Zig type: `f64`
	 */
	readonly exponent: number;
	
	asParam(): ReturnType<typeof $genart.params.range>;
	
}

// @ts-ignore possibly unused args
export const $RangeParam = defType<RangeParam>(8, 64, (mem, base) => {
	let $type: WasmStringPtr, $id: WasmStringPtr, $name: WasmStringPtr, $desc: WasmStringPtr, $doc: WasmStringPtr;
	return {
		get type(): WasmStringPtr {
			return $type || ($type = __str(mem, base));
		},
		get id(): WasmStringPtr {
			return $id || ($id = __str(mem, (base + 4)));
		},
		get name(): WasmStringPtr {
			return $name || ($name = __str(mem, (base + 8)));
		},
		get desc(): WasmStringPtr {
			return $desc || ($desc = __str(mem, (base + 12)));
		},
		get doc(): WasmStringPtr {
			return $doc || ($doc = __str(mem, (base + 16)));
		},
		get update(): UpdateBehavior {
			return mem.u8[(base + 20)];
		},
		get default(): number {
			return mem.f64[(base + 24) >>> 3];
		},
		get min(): number {
			return mem.f64[(base + 32) >>> 3];
		},
		get max(): number {
			return mem.f64[(base + 40) >>> 3];
		},
		get step(): number {
			return mem.f64[(base + 48) >>> 3];
		},
		get exponent(): number {
			return mem.f64[(base + 56) >>> 3];
		},
		
		asParam() {
			return $genart.params.range({
				name: this.name.deref(),
				desc: this.desc.deref(),
				doc: this.doc.deref() || undefined,
				update: <any>UpdateBehavior[this.update],
				default: isFinite(this.default) ? this.default : undefined,
				min: this.min,
				max: this.max,
				step: this.step,
				exponent: this.exponent,
			});
		}
		
	};
});

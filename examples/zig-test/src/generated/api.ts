/**
 * Generated by @thi.ng/wasm-api-bindgen at 2024-11-09T17:50:40.689Z
 * DO NOT EDIT!
 */

// @ts-ignore possibly includes unused imports
import { Pointer, WasmStringPtr, type IWasmMemoryAccess, type MemorySlice, type MemoryView, type WasmType, type WasmTypeBase, type WasmTypeConstructor } from "@thi.ng/wasm-api";
// @ts-ignore
import { __array, __instanceArray, __slice32, __primslice32 } from "@thi.ng/wasm-api/memory";

// @ts-ignore possibly unused
const __str = (mem: IWasmMemoryAccess, base: number, isConst = true) => new WasmStringPtr(mem, base, isConst);

export interface Param extends WasmTypeBase {
	readonly choice: ChoiceParam;
	readonly color: ColorParam;
	readonly range: RangeParam;
}

export const $Param: WasmTypeConstructor<Param> = (mem) => ({
	get align() {
		return 8;
	},
	get size() {
		return 64;
	},
	instanceArray(base, num) {
		return __instanceArray<Param>(this, base, num);
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 64);
			},
			get choice(): ChoiceParam {
				return $ChoiceParam(mem).instance(base);
			},
			get color(): ColorParam {
				return $ColorParam(mem).instance(base);
			},
			get range(): RangeParam {
				return $RangeParam(mem).instance(base);
			},
		};
	}
});

export interface ChoiceParam extends WasmTypeBase {
	/**
	 * DO NOT EDIT - internal use only
	 */
	readonly type: WasmStringPtr;
	readonly id: WasmStringPtr;
	readonly name: WasmStringPtr;
	readonly desc: WasmStringPtr;
	readonly doc: WasmStringPtr;
	readonly default: WasmStringPtr;
	/**
	 * In Zig, use `genart.options()` to wrap
	 */
	readonly options: Option[];
	
	asParam(): ReturnType<typeof $genart.params.choice>;
	
}

export const $ChoiceParam: WasmTypeConstructor<ChoiceParam> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 32;
	},
	instanceArray(base, num) {
		return __instanceArray<ChoiceParam>(this, base, num);
	},
	instance: (base) => {
		let $type: WasmStringPtr | null = null;
		let $id: WasmStringPtr | null = null;
		let $name: WasmStringPtr | null = null;
		let $desc: WasmStringPtr | null = null;
		let $doc: WasmStringPtr | null = null;
		let $default: WasmStringPtr | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 32);
			},
			get type(): WasmStringPtr {
				return $type || ($type = __str(mem, base));
			},
			get id(): WasmStringPtr {
				return $id || ($id = __str(mem, (base + 4)));
			},
			get name(): WasmStringPtr {
				return $name || ($name = __str(mem, (base + 8)));
			},
			get desc(): WasmStringPtr {
				return $desc || ($desc = __str(mem, (base + 12)));
			},
			get doc(): WasmStringPtr {
				return $doc || ($doc = __str(mem, (base + 16)));
			},
			get default(): WasmStringPtr {
				return $default || ($default = __str(mem, (base + 20)));
			},
			get options(): Option[] {
				return __slice32(mem, $Option, (base + 24));
			},
			
			asParam() {
				return $genart.params.choice<string>({
					name: this.name.deref(),
					desc: this.desc.deref(),
					doc: this.doc.deref() || undefined,
					default: this.default.deref() || undefined,
					options: this.options.map((x) => x.label.addr ? [x.value.deref(), x.label.deref()]: x.value.deref()),
				});
			}
			
		};
	}
});

export interface Option extends WasmTypeBase {
	readonly value: WasmStringPtr;
	readonly label: WasmStringPtr;
}

export const $Option: WasmTypeConstructor<Option> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 8;
	},
	instanceArray(base, num) {
		return __instanceArray<Option>(this, base, num);
	},
	instance: (base) => {
		let $value: WasmStringPtr | null = null;
		let $label: WasmStringPtr | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 8);
			},
			get value(): WasmStringPtr {
				return $value || ($value = __str(mem, base));
			},
			get label(): WasmStringPtr {
				return $label || ($label = __str(mem, (base + 4)));
			},
		};
	}
});

export interface ColorParam extends WasmTypeBase {
	/**
	 * DO NOT EDIT - internal use only
	 */
	readonly type: WasmStringPtr;
	readonly id: WasmStringPtr;
	readonly name: WasmStringPtr;
	readonly desc: WasmStringPtr;
	readonly doc: WasmStringPtr;
	readonly default: WasmStringPtr;
	
	asParam(): ReturnType<typeof $genart.params.color>;
	
}

export const $ColorParam: WasmTypeConstructor<ColorParam> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 24;
	},
	instanceArray(base, num) {
		return __instanceArray<ColorParam>(this, base, num);
	},
	instance: (base) => {
		let $type: WasmStringPtr | null = null;
		let $id: WasmStringPtr | null = null;
		let $name: WasmStringPtr | null = null;
		let $desc: WasmStringPtr | null = null;
		let $doc: WasmStringPtr | null = null;
		let $default: WasmStringPtr | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 24);
			},
			get type(): WasmStringPtr {
				return $type || ($type = __str(mem, base));
			},
			get id(): WasmStringPtr {
				return $id || ($id = __str(mem, (base + 4)));
			},
			get name(): WasmStringPtr {
				return $name || ($name = __str(mem, (base + 8)));
			},
			get desc(): WasmStringPtr {
				return $desc || ($desc = __str(mem, (base + 12)));
			},
			get doc(): WasmStringPtr {
				return $doc || ($doc = __str(mem, (base + 16)));
			},
			get default(): WasmStringPtr {
				return $default || ($default = __str(mem, (base + 20)));
			},
			
			asParam() {
				return $genart.params.color({
					name: this.name.deref(),
					desc: this.desc.deref(),
					doc: this.doc.deref() || undefined,
					default: this.default.deref() || undefined,
				});
			}
			
		};
	}
});

export interface RangeParam extends WasmTypeBase {
	/**
	 * DO NOT EDIT - internal use only
	 */
	readonly type: WasmStringPtr;
	readonly id: WasmStringPtr;
	readonly name: WasmStringPtr;
	readonly desc: WasmStringPtr;
	readonly doc: WasmStringPtr;
	/**
	 * Zig type: `f64`
	 */
	readonly default: number;
	/**
	 * Zig type: `f64`
	 */
	readonly min: number;
	/**
	 * Zig type: `f64`
	 */
	readonly max: number;
	/**
	 * Zig type: `f64`
	 */
	readonly step: number;
	/**
	 * Zig type: `f64`
	 */
	readonly exponent: number;
	
	asParam(): ReturnType<typeof $genart.params.range>;
	
}

export const $RangeParam: WasmTypeConstructor<RangeParam> = (mem) => ({
	get align() {
		return 8;
	},
	get size() {
		return 64;
	},
	instanceArray(base, num) {
		return __instanceArray<RangeParam>(this, base, num);
	},
	instance: (base) => {
		let $type: WasmStringPtr | null = null;
		let $id: WasmStringPtr | null = null;
		let $name: WasmStringPtr | null = null;
		let $desc: WasmStringPtr | null = null;
		let $doc: WasmStringPtr | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 64);
			},
			get type(): WasmStringPtr {
				return $type || ($type = __str(mem, base));
			},
			get id(): WasmStringPtr {
				return $id || ($id = __str(mem, (base + 4)));
			},
			get name(): WasmStringPtr {
				return $name || ($name = __str(mem, (base + 8)));
			},
			get desc(): WasmStringPtr {
				return $desc || ($desc = __str(mem, (base + 12)));
			},
			get doc(): WasmStringPtr {
				return $doc || ($doc = __str(mem, (base + 16)));
			},
			get default(): number {
				return mem.f64[(base + 24) >>> 3];
			},
			get min(): number {
				return mem.f64[(base + 32) >>> 3];
			},
			get max(): number {
				return mem.f64[(base + 40) >>> 3];
			},
			get step(): number {
				return mem.f64[(base + 48) >>> 3];
			},
			get exponent(): number {
				return mem.f64[(base + 56) >>> 3];
			},
			
			asParam() {
				return $genart.params.range({
					name: this.name.deref(),
					desc: this.desc.deref(),
					doc: this.doc.deref() || undefined,
					default: isFinite(this.default) ? this.default : undefined,
					min: this.min,
					max: this.max,
					step: this.step,
					exponent: this.exponent,
				});
			}
			
		};
	}
});

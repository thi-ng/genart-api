[
	{
		"name": "UpdateBehavior",
		"type": "enum",
		"tag": "u8",
		"values": ["event", "reload"]
	},
	{
		"name": "EditPermission",
		"type": "enum",
		"tag": "u8",
		"values": ["private", "protected", "public"]
	},
	{
		"name": "ImageFormat",
		"doc": "Currently unused",
		"type": "enum",
		"tag": "u8",
		"values": ["gray", "rgb", "argb"]
	},
	{
		"name": "RampMode",
		"type": "enum",
		"tag": "u8",
		"values": ["linear", "smooth", "exp"]
	},
	{
		"name": "ParamWidgetType",
		"type": "enum",
		"tag": "u8",
		"values": ["default", "alt", "precise"]
	},
	{
		"name": "Param",
		"type": "struct",
		"fields": [
			{
				"name": "type",
				"type": "string",
				"setter": false
			},
			{ "name": "id", "type": "string", "setter": false },
			{ "name": "name", "type": "string", "setter": false },
			{ "name": "desc", "type": "string", "setter": false },
			{
				"name": "doc",
				"type": "string",
				"optional": true,
				"setter": false,
				"default": { "zig": "null" }
			},
			{
				"name": "group",
				"type": "string",
				"setter": false,
				"default": { "zig": "\"main\"" }
			},
			{
				"name": "update",
				"type": "UpdateBehavior",
				"setter": false,
				"default": { "zig": ".event" }
			},
			{
				"name": "edit",
				"type": "EditPermission",
				"setter": false,
				"default": { "zig": ".protected" }
			},
			{
				"name": "widget",
				"type": "ParamWidgetType",
				"setter": false,
				"default": { "zig": ".default" }
			},
			{
				"name": "randomize",
				"type": "u8",
				"setter": false,
				"default": 1
			},
			{
				"name": "order",
				"type": "i8",
				"setter": false,
				"default": 0
			},
			{ "name": "body", "type": "ParamBody", "setter": false }
		],
		"body": {
			"ts": {
				"decl": "asParam(): ParamOpts;",
				"impl": [
					"asParam(): ParamOpts {",
					"return {",
					"name: this.name.deref(),",
					"desc: this.desc.deref(),",
					"doc: this.doc.deref() || undefined,",
					"group: this.group.deref(),",
					"update: <any>UpdateBehavior[this.update],",
					"edit: <any>EditPermission[this.edit],",
					"widget: <any>ParamWidgetType[this.widget],",
					"randomize: !!this.randomize,",
					"order: this.order,",
					"};",
					"}"
				]
			}
		}
	},
	{
		"name": "ParamBody",
		"type": "union",
		"fields": [
			{ "name": "choice", "type": "ChoiceParam", "setter": false },
			{ "name": "color", "type": "ColorParam", "setter": false },
			{ "name": "ramp", "type": "RampParam", "setter": false },
			{ "name": "range", "type": "RangeParam", "setter": false },
			{ "name": "text", "type": "TextParam", "setter": false }
		]
	},
	{
		"name": "ChoiceParam",
		"type": "struct",
		"fields": [
			{
				"name": "default",
				"type": "string",
				"optional": true,
				"setter": false,
				"default": { "zig": "null" }
			},
			{
				"name": "options",
				"type": "Option",
				"tag": "slice",
				"const": true,
				"setter": false
			}
		],
		"body": {
			"ts": {
				"decl": "asParam(parent: Param): ReturnType<typeof $genart.params.choice>;",
				"impl": [
					"asParam(parent: Param) {",
					"return $genart.params.choice<string>({",
					"...parent.asParam(),",
					"default: this.default.deref() || undefined,",
					"options: this.options.map((x) => x.label.addr ? [x.value.deref(), x.label.deref()]: x.value.deref()),",
					"});",
					"}"
				]
			}
		}
	},
	{
		"name": "Option",
		"type": "struct",
		"fields": [
			{ "name": "value", "type": "string" },
			{
				"name": "label",
				"type": "string",
				"optional": true,
				"default": { "zig": "null" }
			}
		]
	},
	{
		"name": "ColorParam",
		"type": "struct",
		"fields": [
			{
				"name": "default",
				"type": "string",
				"optional": true,
				"setter": false,
				"default": { "zig": "null" }
			}
		],
		"body": {
			"ts": {
				"decl": "asParam(parent: Param): ReturnType<typeof $genart.params.color>;",
				"impl": [
					"asParam(parent: Param) {",
					"return $genart.params.color({",
					"...parent.asParam(),",
					"default: this.default.deref() || undefined,",
					"});",
					"}"
				]
			}
		}
	},
	{
		"name": "ImageParam",
		"type": "struct",
		"doc": "Currently only supports grayscale image data",
		"fields": [
			{
				"name": "default",
				"type": "u8",
				"tag": "slice",
				"const": true,
				"setter": false
			},
			{
				"name": "width",
				"type": "u16",
				"setter": false
			},
			{
				"name": "height",
				"type": "u16",
				"setter": false
			}
		],
		"body": {
			"ts": {
				"decl": "asParam(parent: Param): ReturnType<typeof $genart.params.image>;",
				"impl": [
					"asParam(parent: Param) {",
					"return $genart.params.image({",
					"...parent.asParam(),",
					"//format: <any>ImageFormat[this.format],",
					"format: \"gray\",",
					"width: this.width,",
					"height: this.height,",
					"default: this.default,",
					"});",
					"}"
				]
			}
		}
	},
	{
		"name": "RampParam",
		"type": "struct",
		"fields": [
			{
				"name": "stops",
				"type": "f64",
				"tag": "slice",
				"const": true,
				"setter": false
			},
			{
				"name": "mode",
				"type": "RampMode",
				"setter": false,
				"default": { "zig": ".linear" }
			}
		],
		"body": {
			"ts": {
				"decl": "asParam(parent: Param): ReturnType<typeof $genart.params.ramp>;",
				"impl": [
					"asParam(parent: Param) {",
					"const src = this.stops;",
					"const stops: [number,number][] = [];",
					"for(let i = 0; i < src.length; i += 2) stops.push([src[i], src[i+1]]);",
					"return $genart.params.ramp({",
					"...parent.asParam(),",
					"mode: <any>RampMode[this.mode],",
					"stops,",
					"});",
					"}"
				]
			}
		}
	},
	{
		"name": "RangeParam",
		"type": "struct",
		"fields": [
			{
				"name": "default",
				"type": "f64",
				"setter": false,
				"default": { "zig": "std.math.inf(f64)" }
			},
			{ "name": "min", "type": "f64", "default": 0, "setter": false },
			{ "name": "max", "type": "f64", "default": 100, "setter": false },
			{ "name": "step", "type": "f64", "default": 1, "setter": false },
			{ "name": "exponent", "type": "f64", "default": 1, "setter": false }
		],
		"body": {
			"ts": {
				"decl": "asParam(parent: Param): ReturnType<typeof $genart.params.range>;",
				"impl": [
					"asParam(parent: Param) {",
					"return $genart.params.range({",
					"...parent.asParam(),",
					"default: isFinite(this.default) ? this.default : undefined,",
					"min: this.min,",
					"max: this.max,",
					"step: this.step,",
					"exponent: this.exponent,",
					"});",
					"}"
				]
			}
		}
	},
	{
		"name": "TextParam",
		"type": "struct",
		"fields": [
			{
				"name": "default",
				"type": "string",
				"setter": false
			},
			{
				"name": "match",
				"type": "string",
				"optional": true,
				"setter": false,
				"default": { "zig": "null" }
			},
			{ "name": "min", "type": "usize", "default": 0, "setter": false },
			{ "name": "max", "type": "usize", "default": 0, "setter": false },
			{ "name": "multiline", "type": "u8", "default": 0, "setter": false }
		],
		"body": {
			"ts": {
				"decl": "asParam(parent: Param): ReturnType<typeof $genart.params.text>;",
				"impl": [
					"asParam(parent: Param) {",
					"return $genart.params.text({",
					"...parent.asParam(),",
					"default: this.default.deref(),",
					"match: this.match.deref() || undefined,",
					"min: this.min || undefined,",
					"max: this.max || undefined,",
					"multiline: !!this.multiline,",
					"});",
					"}"
				]
			}
		}
	}
]

"use strict";(()=>{var h={choice:"LIST",color:"COLOR",range:"NUMBER",toggle:"BOOLEAN",text:"HASH",vector:"NUMBER",xy:"NUMBER"},{equiv:u,isString:g}=$genart.utils,l=class{mode="play";params;cache={};adaptations={};timeoutID;constructor(){$layer.debug=!0,$genart.on("genart:state-change",({state:t})=>t==="ready"&&!$layer.controlled&&$genart.start()),window.addEventListener("layer:play",()=>{($genart.state==="ready"||$genart.state==="stop")&&$genart.start($genart.state==="stop")}),window.addEventListener("layer:pause",()=>$genart.stop()),window.addEventListener("layer:paramchange",t=>{let{id:i,value:o}=t.detail,a=this.adaptations[i];a&&(i=a.id,o=a.adapt(o));let r=this.params?.[i];if(!r){console.warn(`${this.id}: ignoring change for unknown param: ${i}...`);return}u(this.cache[i],o)||(this.cache[i]=o,r.update!=="reload"&&$genart.setParamValue(i,o))}),window.addEventListener("layer:dimensionschange",t=>{$genart.emit({type:"genart:resize",screen:{...t.detail,dpr:1}})})}get id(){return"@genart-api/adapter-layer"}get screen(){return{width:$layer.width,height:$layer.height,dpr:1}}get prng(){return{seed:$layer.uuid,rnd:$layer.prng,reset:()=>$layer.prng}}async updateParam(t,i){let o;if(Object.values(this.adaptations).find(a=>a.id===t))return o=this.cache[t],{value:o};if(o=$layer.parameters[t],!(o==null||u(this.cache[t],o)))return this.cache[t]=o,{value:o}}async initParams(t){this.params=t;let i=[];for(let a in t){let r=t[a],p=h[r.type];if(!p){console.warn(`${this.id}: unsupported type:`,r.type," for param:",a,", skipping...");continue}let m={id:a,kind:p,name:r.name||a,description:r.desc+(r.update==="reload"?" (requires reload)":""),default:r.default,customization_level:r.edit==="private"?"ARTIST":r.edit==="public"?"VIEWER":"CURATOR"};switch(i.push(m),this.cache[a]=r.default,r.type){case"choice":{let e=r,s=m;s.options=e.options.map(c=>Array.isArray(c)?{value:c[0],label:c[1]}:{value:c,label:c});break}case"color":{this.adaptations[a]={id:a,adapt:e=>g(e)?e:e.hex};break}case"range":{let e=r,s=m;s.min=e.min,s.max=e.max,s.step=e.step;break}case"text":{let e=r,s=m;switch(s.minLength=e.min,s.maxLength=e.max,e.match instanceof RegExp?e.match.source:e.match){case"^[0-9a-f]+$":case"^[0-9a-fA-F]+$":s.pattern="HEX";break;case"^[a-zA-Z0-9-_=]+$":s.pattern="BASE64";break;case"^[a-zA-Z ]+$":s.pattern="ALPHABETICAL";break;case"^[a-zA-Z0-9-_ ]+$":s.pattern="ALPHANUMERIC";break;default:console.warn(`${this.id}: couldn't determine pattern type for param:`,a,", using 'ALPHANUMERIC'..."),s.pattern="ALPHANUMERIC"}break}case"vector":{i.pop();let e=r,s=e.dim,c=e.labels;for(let n=0;n<s;n++){let d={...m};d.id=a+"__"+c[n],d.name=e.name+` (${c[n]})`,d.min=e.min[n],d.max=e.max[n],d.step=e.step[n],e.default&&(d.default=e.default[n]),i.push(d),this.adaptations[d.id]=this.adaptVectorParam(a,n)}break}case"xy":{i.pop();let e="xy",s=r;for(let c=0;c<2;c++){let n={...m};n.id=a+"__"+e[c],n.name=s.name+` (${e[c]})`,n.min=0,n.max=1,n.step=.001,s.default&&(n.default=s.default[c]),i.push(n),this.adaptations[n.id]=this.adaptVectorParam(a,c)}}}}let o=await $layer.params(...i);for(let[a,r]of Object.entries(o)){let p=this.adaptations[a];p&&(this.cache[p.id]=p.adapt(r))}}setTraits(){}capture(t){$layer.registerCanvas(t)}adaptVectorParam(t,i){return{id:t,adapt:o=>{let a=this.cache[t].slice();return a[i]=o,a}}}};$genart.setAdapter(new l);})();

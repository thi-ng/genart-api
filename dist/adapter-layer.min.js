"use strict";(()=>{var h={choice:"LIST",color:"COLOR",range:"NUMBER",toggle:"BOOLEAN",text:"HASH",vector:"NUMBER",xy:"NUMBER"},{prng:{defPRNG:g,sfc32:P},utils:{equiv:u,isString:$,parseUUID:y}}=$genart,l=class{mode="play";_prng;_params;_cache={};_adaptations={};constructor(){$genart.on("genart:state-change",({state:t})=>t==="ready"&&!$layer.controlled&&$genart.start()),window.addEventListener("layer:play",()=>{($genart.state==="ready"||$genart.state==="stop")&&$genart.start($genart.state==="stop")}),window.addEventListener("layer:pause",()=>$genart.stop()),window.addEventListener("layer:paramchange",t=>{let{id:n,value:o}=t.detail,e=this._adaptations[n];e&&(n=e.id,o=e.adapt(o));let r=this._params?.[n];if(!r){this.warn(`ignoring change for unknown param: ${n}...`);return}u(this._cache[n],o)||(this._cache[n]=o,r.update!=="reload"&&$genart.setParamValue(n,o))}),window.addEventListener("layer:dimensionschange",t=>{$genart.emit({type:"genart:resize",screen:{...t.detail,dpr:1}})})}get id(){return"@genart-api/adapter-layer"}get screen(){return{width:$layer.width,height:$layer.height,dpr:1}}get prng(){return this._prng||(this._prng=g($layer.uuid,y($layer.uuid),P))}async updateParam(t,n){let o;if(Object.values(this._adaptations).find(e=>e.id===t))return o=this._cache[t],{value:o};if(o=$layer.parameters[t],!(o==null||u(this._cache[t],o)))return this._cache[t]=o,{value:o}}async initParams(t){this._params=t;let n=[];for(let e in t){let r=t[e],m=h[r.type];if(!m){this.warn(`unsupported type '${r.type}' for param id: ${e}, skipping...`);continue}let p={id:e,kind:m,name:r.name||e,description:r.desc+(r.update==="reload"?" (requires reload)":""),default:r.default,customization_level:r.edit==="private"?"ARTIST":r.edit==="public"?"VIEWER":"CURATOR"};switch(n.push(p),this._cache[e]=r.default,r.type){case"choice":{let a=r,s=p;s.options=a.options.map(i=>Array.isArray(i)?{value:i[0],label:i[1]}:{value:i,label:i});break}case"color":{this._adaptations[e]={id:e,adapt:a=>$(a)?a:a.hex};break}case"range":{let a=r,s=p;s.min=a.min,s.max=a.max,s.step=a.step;break}case"text":{let a=r,s=p;switch(s.minLength=a.minLength,s.maxLength=a.maxLength,a.match instanceof RegExp?a.match.source:a.match){case"^[0-9a-f]+$":case"^[0-9a-fA-F]+$":s.pattern="HEX";break;case"^[a-zA-Z0-9-_=]+$":s.pattern="BASE64";break;case"^[a-zA-Z ]+$":s.pattern="ALPHABETICAL";break;case"^[a-zA-Z0-9_ ]+$":s.pattern="ALPHANUMERIC";break;default:this.warn(`couldn't determine pattern type for text param: ${e}, using 'ALPHANUMERIC'...`),s.pattern="ALPHANUMERIC"}break}case"vector":{n.pop();let a=r,s=a.size,i=a.labels;for(let c=0;c<s;c++){let d={...p};d.id=e+"__"+i[c],d.name=a.name+` (${i[c]})`,d.min=a.min[c],d.max=a.max[c],d.step=a.step[c],a.default&&(d.default=a.default[c]),n.push(d),this._adaptations[d.id]=this.adaptVectorParam(e,c)}break}case"weighted":{let a=r,s=p;s.options=a.options.map(i=>({value:i[1],label:i[2]}));break}case"xy":{n.pop();let a="xy",s=r;for(let i=0;i<2;i++){let c={...p};c.id=e+"__"+a[i],c.name=s.name+` (${a[i]})`,c.min=0,c.max=1,c.step=.001,s.default&&(c.default=s.default[i]),n.push(c),this._adaptations[c.id]=this.adaptVectorParam(e,i)}}}}let o=await $layer.params(...n);for(let[e,r]of Object.entries(this._adaptations)){let m=o[e];m!=null&&(this._cache[r.id]=r.adapt(m))}}setTraits(){}capture(t){$layer.registerCanvas(t)}adaptVectorParam(t,n){return{id:t,adapt:o=>{let e=this._cache[t].slice();return e[n]=o,e}}}warn(t,...n){console.warn(`${this.id}:`,t,...n)}};$genart.setAdapter(new l);})();

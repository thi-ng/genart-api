"use strict";(()=>{var h={choice:"LIST",color:"COLOR",range:"NUMBER",toggle:"BOOLEAN",text:"HASH",vector:"NUMBER",xy:"NUMBER"},{equiv:u,isString:g}=$genart.utils,l=class{mode="play";params;cache={};adaptations={};timeoutID;constructor(){$layer.debug=!0,$genart.on("genart:state-change",({state:s})=>s==="ready"&&!$layer.controlled&&$genart.start()),window.addEventListener("layer:play",()=>{($genart.state==="ready"||$genart.state==="stop")&&$genart.start($genart.state==="stop")}),window.addEventListener("layer:pause",()=>$genart.stop()),window.addEventListener("layer:paramchange",s=>{let{id:o,value:c}=s.detail,a=this.adaptations[o];a&&(o=a.id,c=a.adapt(c));let t=this.params?.[o];if(!t){console.warn(`${this.id}: ignoring change for unknown param: ${o}...`);return}u(this.cache[o],c)||(this.cache[o]=c,t.update!=="reload"&&$genart.setParamValue(o,c))}),window.addEventListener("layer:dimensionschange",s=>{$genart.emit({type:"genart:resize",screen:{...s.detail,dpr:1}})})}get id(){return"@genart-api/adapter-layer"}get screen(){return{width:$layer.width,height:$layer.height,dpr:1}}get prng(){return{seed:$layer.uuid,rnd:$layer.prng,reset:()=>$layer.prng}}async updateParam(s,o){let c;if(Object.values(this.adaptations).find(a=>a.id===s))return c=this.cache[s],{value:c};if(c=$layer.parameters[s],!(c==null||u(this.cache[s],c)))return this.cache[s]=c,{value:c}}async initParams(s){this.params=s;let o=[];for(let a in s){let t=s[a],m=h[t.type];if(!m){console.warn(`${this.id}: unsupported type:`,t.type," for param:",a,", skipping...");continue}let p={id:a,kind:m,name:t.name||a,description:t.desc+(t.update==="reload"?" (requires reload)":""),default:t.default,customization_level:t.edit==="private"?"ARTIST":t.edit==="public"?"VIEWER":"CURATOR"};switch(o.push(p),this.cache[a]=t.default,t.type){case"choice":{let e=t,r=p;r.options=e.options.map(n=>Array.isArray(n)?{value:n[0],label:n[1]}:{value:n,label:n});break}case"color":{this.adaptations[a]={id:a,adapt:e=>g(e)?e:e.hex};break}case"range":{let e=t,r=p;r.min=e.min,r.max=e.max,r.step=e.step;break}case"text":{let e=t,r=p;switch(r.minLength=e.min,r.maxLength=e.max,e.match instanceof RegExp?e.match.source:e.match){case"^[0-9a-f]+$":case"^[0-9a-fA-F]+$":r.pattern="HEX";break;case"^[a-zA-Z0-9-_=]+$":r.pattern="BASE64";break;case"^[a-zA-Z ]+$":r.pattern="ALPHABETICAL";break;case"^[a-zA-Z0-9-_ ]+$":r.pattern="ALPHANUMERIC";break;default:console.warn(`${this.id}: couldn't determine pattern type for param:`,a,", using 'ALPHANUMERIC'..."),r.pattern="ALPHANUMERIC"}break}case"vector":{o.pop();let e=t,r=e.size,n=e.labels;for(let i=0;i<r;i++){let d={...p};d.id=a+"__"+n[i],d.name=e.name+` (${n[i]})`,d.min=e.min[i],d.max=e.max[i],d.step=e.step[i],e.default&&(d.default=e.default[i]),o.push(d),this.adaptations[d.id]=this.adaptVectorParam(a,i)}break}case"weighted":{let e=t,r=p;r.options=e.options.map(n=>({value:n[1],label:n[2]}));break}case"xy":{o.pop();let e="xy",r=t;for(let n=0;n<2;n++){let i={...p};i.id=a+"__"+e[n],i.name=r.name+` (${e[n]})`,i.min=0,i.max=1,i.step=.001,r.default&&(i.default=r.default[n]),o.push(i),this.adaptations[i.id]=this.adaptVectorParam(a,n)}}}}let c=await $layer.params(...o);for(let[a,t]of Object.entries(c)){let m=this.adaptations[a];m&&(this.cache[m.id]=m.adapt(t))}}setTraits(){}capture(s){$layer.registerCanvas(s)}adaptVectorParam(s,o){return{id:s,adapt:c=>{let a=this.cache[s].slice();return a[o]=c,a}}}};$genart.setAdapter(new l);})();
